FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    curl \
    gcc \
    python3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Ensure assets directory exists and has proper permissions
RUN chmod -R 755 assets/ || true

# Create /data directories for shared volumes only
RUN mkdir -p /data/uploads /data/outputs \
    && chown -R appuser:appuser /data \
    && chmod -R 775 /data

# Create non-root user for security
RUN useradd -m -u 1000 appuser \
    && chown -R appuser:appuser /app /data
USER appuser

# Expose port (used only in API mode)
EXPOSE 5000

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_ENV=production
ENV PYTHONUNBUFFERED=1

# Health check removed from Dockerfile - will be set in docker-compose for API only

# ðŸ‘‡ Run API or Celery Worker depending on WORKER_MODE
CMD sh -c 'if [ "$WORKER_MODE" = "celery" ]; then \
              celery -A app.celery worker --loglevel=info \
                --concurrency=${CELERY_CONCURRENCY:-2} \
                --prefetch-multiplier=${CELERY_PREFETCH_MULTIPLIER:-1}; \
           else \
              gunicorn --bind 0.0.0.0:${PORT:-5000} \
                --workers=${GUNICORN_WORKERS:-3} \
                --worker-class=gthread \
                --threads=${GUNICORN_THREADS:-8} \
                --timeout=${GUNICORN_TIMEOUT:-600} \
                --max-requests=${GUNICORN_MAX_REQUESTS:-500} \
                --max-requests-jitter=${GUNICORN_MAX_REQUESTS_JITTER:-50} \
                app:app; \
           fi'
