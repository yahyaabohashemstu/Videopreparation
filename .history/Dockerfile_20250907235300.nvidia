# ===== GPU / NVENC build =====
FROM jrottenberg/ffmpeg:6.1-nvidia AS base

# Python + أدوات البناء
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-venv python3-pip python3-dev gcc \
    curl build-essential libglib2.0-0 libsm6 libxext6 libxrender1 libgomp1 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# المتطلبات
COPY requirements.txt .
RUN python3 -m pip install --no-cache-dir -U pip && \
    python3 -m pip install --no-cache-dir -r requirements.txt

# الكود
COPY . .

# مستخدم غير جذري + مسارات مشاركة
RUN useradd -m -u 1000 appuser && \
    mkdir -p /data/uploads /data/outputs && \
    chown -R appuser:appuser /app /data && \
    chmod -R 775 /data

USER appuser

ENV PYTHONUNBUFFERED=1 FLASK_APP=app.py FLASK_ENV=production PORT=5000
EXPOSE 5000

# ملاحظة: لا نضع HEALTHCHECK هنا حتى لا يؤذي الـ Worker
# تشغيل API أو Worker حسب WORKER_MODE + ربط prefetch/concurrency بالبيئة
CMD sh -c 'if [ "$WORKER_MODE" = "celery" ]; then \
              celery -A app.celery worker --loglevel=info \
                --concurrency=${CELERY_CONCURRENCY:-2} \
                --prefetch-multiplier=${CELERY_PREFETCH_MULTIPLIER:-1}; \
           else \
              gunicorn --bind 0.0.0.0:${PORT:-5000} \
                --workers=${GUNICORN_WORKERS:-3} \
                --worker-class=gthread \
                --threads=${GUNICORN_THREADS:-8} \
                --timeout=${GUNICORN_TIMEOUT:-600} \
                --max-requests=${GUNICORN_MAX_REQUESTS:-500} \
                --max-requests-jitter=${GUNICORN_MAX_REQUESTS_JITTER:-50} \
                --keep-alive=${GUNICORN_KEEPALIVE:-5} \
                app:app; \
           fi'
